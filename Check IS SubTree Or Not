public class CheckIsSubTreeOrNot {
    static class Node{
        int data;
        Node left, right;

        Node(int data){
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
    public static boolean isIdentical(Node node ,Node subtree){
        if(node == null && subtree == null){
            return true;
    }
    else if(node == null || subtree == null || node.data != subtree.data){
        return false;
    }
    if(!isIdentical(node.left, subtree.left)){
        return false;
    }
    if(!isIdentical(node.right, subtree.right)){
        return false;
}
    return true;
}

    public static boolean IsSubTre(Node root,Node subtree){
        if(root == null){
            return false;
        }
        if(root.data == subtree.data){
            if(isIdentical(root,subtree)){
                return true;
            }
        }

        return IsSubTre(root.left, subtree) || IsSubTre(root.right, subtree);
    }

    public static void main(String[] args) {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.left = new Node(7);

        Node subtree = new Node(2);
        subtree.left = new Node(4);
        subtree.right = new Node(5);

        System.out.println(IsSubTre(root, subtree));
    }
}
