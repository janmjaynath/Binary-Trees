import java.util.ArrayList;

public class MinimumDisttanceBetween2Nodes {
    static class Node{
        int data;
        Node left,right;

        Node(int data){
            this.data=data;
            this.left = null;
            this.right=null;
        }
    }
    public static boolean getpath(Node root ,int n,ArrayList<Node> path){

        if (root == null){
            return false;
        }
        path.add(root);
        if(root.data == n){
            return true;
        }
        boolean foundLeft = getpath(root.left, n, path);
        boolean foundRight = getpath(root.right, n, path);

        if(foundLeft || foundRight){
            return true;
        }
        path.remove(path.size()-1);
        return false;

    }
    public static Node LCA(Node root,int n1,int n2){
        ArrayList<Node> path1 = new ArrayList<>();
        ArrayList<Node> path2 = new ArrayList<>();

        getpath(root,n1,path1);
        getpath(root,n2,path2);

        //last common ancester
        int i = 0;
        for(;i<path1.size() && i<path2.size();i++){
            if(path1.get(i)!=path2.get(i)){
                break;
            }
        }
        //last equal node -> i-ith
        return path1.get(i-1);
    }
    public static Node LCA2(Node root,int n1,int n2){
        if(root == null){
            return root;
        }
        if(root.data == n1 || root.data == n2){
            return root;
        }
        //leftLCA =avl || RighrLCA = null
        if(root.left == null){
            return root.right;
        }
        if(root.right == null){
            return root.left;
        }
        return root;
    }

    public static int lcaDist(Node root,int n){
        if(root == null){
            return -1;
        }
        if(root.data == n){
            return 0;
        }

        int leftDist = lcaDist(root.left, n);
        int rightDist = lcaDist(root.right, n);
        if(leftDist == -1 && rightDist == -1){
            return -1;
        }
        else if(rightDist == -1){
            return leftDist+1;        
        }
        else{
            return rightDist+1;
        }
      
    }

    public static int minDist(Node root ,int n1,int n2){
        Node lca = LCA2(root, n1, n2);
        int Dist1 = lcaDist(lca,n1);
        int Dist2 = lcaDist(lca,n2);

        return Dist1 + Dist2;
       
    }
    public static int KthAncester(Node root,int n,int k){
        if(root == null){
            return -1;
        }
        if(root.data == n){
            return 0;
        }
        int maxleft = KthAncester(root.left, n, k);
        int maxright = KthAncester(root.right, n, k);

        int max = Math.max(maxleft, maxright);
        if(max + 1 == k){
            System.out.println(root.data + " ");
        }
        return max+1;

    }

    public static void main(String[] args) {
        Node root = new Node(1);
    root.left = new Node(2);
    root.right = new Node(3);
    root.left.left = new Node(4);
    root.left.right = new Node(5);
    root.right.left = new Node(6);
    root.right.left = new Node(7);

    //int n1 = 5 ,n2 = 2;
        int n = 5 ,k = 2;

    KthAncester(root, n, k);
    }
}
